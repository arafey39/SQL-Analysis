-- Create database
CREATE DATABASE IF NOT EXISTS walmartSales;


-- Create table
CREATE TABLE IF NOT EXISTS sales(
	invoice_id VARCHAR(30) NOT NULL PRIMARY KEY,
    branch VARCHAR(5) NOT NULL,
    city VARCHAR(30) NOT NULL,
    customer_type VARCHAR(30) NOT NULL,
    gender VARCHAR(30) NOT NULL,
    product_line VARCHAR(100) NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    quantity INT NOT NULL,
    tax_pct FLOAT(6,4) NOT NULL,
    total DECIMAL(12, 4) NOT NULL,
    date DATETIME NOT NULL,
    time TIME NOT NULL,
    payment VARCHAR(15) NOT NULL,
    cogs DECIMAL(10,2) NOT NULL,
    gross_margin_pct FLOAT(11,9),
    gross_income DECIMAL(12, 4),
    rating FLOAT(2, 1)
);

-- Data cleaning
SELECT
	*
FROM sales;


-- Add the time_of_day column
SELECT
	time,
	(CASE
		WHEN `time` BETWEEN "00:00:00" AND "12:00:00" THEN "Morning"
        WHEN `time` BETWEEN "12:01:00" AND "16:00:00" THEN "Afternoon"
        ELSE "Evening"
    END) AS time_of_day
FROM sales;

-- = day name---------------
select 
	date,
    dayname(date) as day_name
from sales;

alter table sales add column day_name varchar(10);

update sales
set day_name = dayname(date);

-- month name--------------
select 
	date,
    monthname(date) as month_name
from sales;

alter table sales add column month_name varchar(10);

update sales
set month_name = monthname(date);

-- ----------------------------------------------------------------------------------------------
-- ----------------------------------- generic questions-----------------------------------------

-- how many unique cities in data----

select 
	distinct(city)
from sales;

-- in which city is each branch ------------------
select 
	distinct city,
	branch
from sales;
-- --------------------------------------------------------------------------------------------------------
-- --------------------------------product details---------------------------------------------------------
-- how many unique product lines does the company have---------------
select
	distinct product_line as unique_product_lines
from sales;

-- ---------------common payment moethords--------------------------------------------------
select 
	payment_method,
    count(payment_method) as cnt
from sales
group by payment_method
order by cnt desc;

-- most selling product line ------------------------------------

select 
	product_line,
    count(product_line) as cnt
from sales 
group by product_line
order by cnt desc;

-- revenue by month----------------------------------------
select 
	sum(total) as revenue,
    month_name as month 
from sales
group by month_name
order by revenue desc;

-- ------------month with the most COGS-----------------------

select 
	month_name as month,
    sum(cogs) as COGS
from sales
group by month
order by COGS desc;

-- -------------------product line with most revenue ----------------------------------------
select 
	distinct product_line,
    sum(total) as revenue
from sales
group by product_line
order by revenue desc;

-- --------------------city with the most revenue-----------------------------------------------
select 
	city,
    sum(total) as total_revenue
from sales
group by city
order by total_revenue desc;

-- --------------product line with largest VAT------------------------------------------------------
select 
	product_line,
    avg(VAT) as VAT
from sales
group by product_line
order by VAT desc;

-- Which branch sold more products than average product sold?
select 
	branch,
    sum(quantity) as quantity
from sales
group by branch
having sum(quantity) > (select avg(quantity) from sales);

-- ---------- most common product line by gender----------------------------------
select 
	product_line,
    gender,
    count(gender) as total
from sales
group by product_line, gender
order by total desc;

-- -------------average rating of each product line------------------
select 
	product_line,
    round(avg(rating), 2) as avg_rating
from sales
group by product_line
order by avg_rating desc;

-- Fetch each product line and add a column to those product 
-- line showing "Good", "Bad". Good if its greater than average sales

select 
	product_line,
    sum(total) as total_sales,
    (case
		when sum(total) > avg(total) then 'Good'
		else 'Bad'
	end) as status_of_sales
from sales 
group by product_line
order by total_sales desc;

-- -------------------------------------------------------------------------------------------------------------------
-- ---------------------------sales analysis -------------------------------------------------------------------------
-- ------------------------number of sales made in each time of the day ----------------------------------------------

select 
	time_of_day,
    count(*) as total_sales
from sales
where day_name = 'Monday'
group by time_of_day
order by total_sales desc;

-- -----------which customer type brings the most revenue--------------------------------------
select 
	customer_type as type_of_customer,
    round(sum(total), 2) as revenue
from sales
group by customer_type
order by revenue desc;

-- ------------------which city has the largest VAT------------------------------------
select 
	city,
    round(avg(VAT), 2) as VAT
from sales 
group by city
order by VAT desc;

-- --------------------which customer type pays the most in VAT-----------------------------------------------------
select 
	customer_type,
    round(avg(VAT), 2) as VAT
from sales
group by customer_type
order by VAT desc;

-- ----------------------------------------------------------------------------------------------------------------------
-- ------------------------------customer analysis----------------------------------------------------------------------

-- -------------how many unique customer types does the data have-----------------------------------------

select 	
	distinct(customer_type)
from sales;
-- -------------unique payment types ----------------------------------------------------------------------------------
select 
	distinct(payment_method)
from sales;

-- -----------------most common cutomer type-----------------------------------------------
select 
	customer_type,
    count(*) as count
from sales
group by customer_type
order by count desc;

-- ------------customer type that buys the most---------------------------------
select 
	customer_type,
	count(*) as quantity
from sales
group by customer_type
order by quantity;


-- ------what is the gender of most of the customers------------------------------------------------------

select 
	gender,
    count(*) as count
from sales
group by gender
order by count desc;

-- ----------------gender distribution by each branch
select 
	gender,
    count(*) as gender_count
from sales
where branch = 'B'
group by gender
order by gender_count desc;

-- -----------which time of day customers give most rating-----------------------------------------------
select 
	time_of_day,
    avg(rating) as rating
from sales
group by time_of_day 
order by rating desc;

-- ----------------which day of the week has the best avg rating------------------------------------------------------
select
	day_name,
   round(avg(rating), 2) as avg_rating
from sales
group by day_name
order by avg_rating desc;



































